---
# yum repoistory create
- name: Create mount point
  file:
    path: /mnt/cdrom
    state: directory

# CLI install
- name: download openshift-installer /root/src
  ansible.builtin.get_url:
    url: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-4.19/openshift-install-linux-4.19.14.tar.gz"
    dest: "/root/src/openshift-install-linux-4.19.14.tar.gz"
    mode: "0644"
  register: download_result
  ignore_errors: true

- name: "Show openshift-installer /root/src"
  ansible.builtin.debug:
    msg:
      - "openshift-installer file downloaded"
      - "URL: {{ download_result.url | default('Download skipped or failed') }}"
      - "Path: {{ download_result.dest | default('N/A') }}"
  when: download_result is defined
  
- name: download openshif-cli /root/src
  ansible.builtin.get_url:
    url: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-4.19/openshift-client-linux.tar.gz"
    dest: "/root/src/openshift-client-linux.tar.gz"
    mode: "0644"
  register: download_result
  ignore_errors: true

- name: "Show openshift-client /root/src"
  ansible.builtin.debug:
    msg:
      - "openshift-client file downloaded"
      - "URL: {{ download_result.url | default('Download skipped or failed') }}"
      - "Path: {{ download_result.dest | default('N/A') }}"
  when: download_result is defined

- name: download openshif-mirror /root/src
  ansible.builtin.get_url:
    url: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-4.19/oc-mirror.tar.gz"
    dest: "/root/src/oc-mirror.tar.gz"
    mode: "0644"
  register: download_result
  ignore_errors: true

- name: "Show openshift-mirror /root/src"
  ansible.builtin.debug:
    msg:
      - "openshift-mirror file downloaded"
      - "URL: {{ download_result.url | default('Download skipped or failed') }}"
      - "Path: {{ download_result.dest | default('N/A') }}"
  when: download_result is defined

- name: unarchive openshift-installer file 
  unarchive:
    src: "/root/src/openshift-install-linux-4.19.14.tar.gz"
    dest: "/root/src/"
    remote_src: True
  become: True  

- name: unarchive openshift-client file 
  unarchive:
    src: "/root/src/openshift-client-linux-4.19.14.tar.gz"
    dest: "/root/src/"
    remote_src: True
  become: True 

- name: unarchive oc-mirror file 
  unarchive:
    src: "/root/src/oc-mirror.tar.gz"
    dest: "/root/src/"
    remote_src: True
  become: True 

- name: openshift-installer to local directory
  command: cp -a /root/src/openshift-installer /usr/bin/

- name: openshift-client to local directory
  command: cp -a /root/src/oc /usr/bin/

- name: kubernetes-client to local directory
  command: cp -a /root/src/kubecltl /usr/bin/

- name: oc-mirror to local directory
  command: cp -a /root/src/oc-mirror /usr/bin/

# CD-Rom Copy
- name: Mount CD-ROM
  mount:
    path: /mnt/cdrom
    src: /dev/cdrom
    fstype: iso9660
    state: mounted

- name: Copy CD-ROM contents to local directory
  command: cp -a /mnt/cdrom/. /var/www/html/repo/
  args:
    creates: /var/www/html/repo/

- name: Unmount CD-ROM
  mount:
    path: /mnt/cdrom
    state: unmounted

- name: Generate repository metadata
  command: createrepo_c /var/www/html/repo/
  args:
    creates: "/var/www/html/repo/repodata"

# HTTPD isntall
- name: httpd install 
  ansible.builtin.dnf:
    name: httpd
    state: present 

- name: httpd start 
  shell: systemctl start httpd && systemctl enable httpd

# image registry
- name: podman install 
  ansible.builtin.dnf:
    name: podman
    state: present 


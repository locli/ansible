# vi /opt/ansible/bastion-add/roles/haproxy/templates/haproxy.cfg.j2
#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

frontend frontend_6443
    bind *:6443
    mode tcp
    option tcplog
    default_backend backend_6443

frontend frontend_22623
    bind *:22623
    mode tcp
    option tcplog
    default_backend backend_22623

frontend frontend_443
    bind *:443
    mode tcp
    option tcplog
    default_backend backend_443

frontend backend_80
    bind *:80
    mode tcp
    option tcplog
    default_backend backend_80

backend backend_6443
    mode tcp
    option tcplog
    balance source
    server bootstrap 192.168.41.227:6443 check
    server master0 192.168.41.221:6443 check
    server master1 192.168.41.222:6443 check
    server master2 192.168.41.223:6443 check

backend backend_22623
    mode tcp
    option tcplog
    balance source
    server bootstrap 192.168.41.227:22623 check
    server master0 192.168.41.221:22623 check
    server master1 192.168.41.222:22623 check
    server master2 192.168.41.223:22623 check

backend backend_443
    mode tcp
    option tcplog
    balance source
    server worker0 192.168.41.221:443 check
    server worker1 192.168.41.222:443 check
    server worker2 192.168.41.223:443 check

backend backend_80
    mode tcp
    option tcplog
    balance source
    server worker0 192.168.41.221:80 check
    server worker1 192.168.41.222:80 check
    server worker2 192.168.41.223:80 check